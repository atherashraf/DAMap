import MapVM from "../models/MapVM";
import VectorLayer from "ol/layer/Vector";
import { Style } from "ol/style";
import { Feature } from "ol";
import VectorTileLayer from "ol/layer/VectorTile";
import VectorTileSource from "ol/source/VectorTile";
import { IFeatureStyle, IGeomStyle, ILayerInfo } from "../TypeDeclaration";
import TileLayer from "ol/layer/Tile";
import XYZ from 'ol/source/XYZ';
declare class AbstractDALayer {
    dataSource: VectorTileSource | XYZ;
    layer: VectorLayer<any> | VectorTileLayer | TileLayer<any>;
    layerInfo: ILayerInfo;
    style: IFeatureStyle;
    mapVM: MapVM;
    uuid: string;
    extent?: number[];
    features: any[];
    constructor(info: ILayerInfo, mapVM: MapVM);
    getExtent(): Promise<number[]>;
    getGeomType(): string[];
    getDataModel(): string;
    getCategory(): string;
    getLayerTitle(): string;
    getLayerId(): string;
    setLayer(): void;
    setDataSource(): void;
    getOlLayer(): VectorTileLayer | VectorLayer<any> | TileLayer<any>;
    refreshLayer(): void;
    getDataSource(): VectorTileSource | XYZ;
    setStyle(style: IFeatureStyle): void;
    createOLStyle(feature: Feature, style?: IGeomStyle): Style;
    styleFunction(feature: Feature, resolution: number): Style;
}
export default AbstractDALayer;
